<?php
// $Id$
/**
 * @file
 * Title        : Nodequeue Pager
 * Created      : 2010.02.15
 * Author       : Jerod Fritz (jerod@centogram.com) - Centogram Development
 * Description  : Create block(s) to allow Prev/Next navigation between nodes within a nodequeue while viewing the node itself
 */

/**
 * Implementation of hook_menu().
 */
function nodequeue_pager_menu() {
	$items['admin/structure/nodequeue/nodequeue_pager'] = array(
		'title' => 'Nodequeue Pager',
		'description' => 'Configure Nodequeue Pager',
		'page callback' => 'drupal_get_form',
		'page arguments' => array('nodequeue_pager_admin_settings'),
		'access arguments' => array('administer site configuration'),
		'type' => MENU_LOCAL_TASK,
	);
	return $items;
}

/**
 * Implements hook_block_info().
 */
function nodequeue_pager_block_info() {
	for ($i = 1; $i <= variable_get('nodequeue_pagers_number', '2'); $i++) {
		$blocks[$i]['info'] = variable_get('nodequeue_pager_name_'. $i, 'Nodequeue Pager '. $i) .' (Nodequeue Pager)';
		$blocks[$i]['cache'] = DRUPAL_NO_CACHE;
	}
	return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function nodequeue_pager_block_configure($delta = '') {
	$form['nodequeue_pager_name_'. $delta] = array(
		'#type' => 'textfield',
		'#title' => t('Nodequeue Pager Name'),
		'#default_value' => variable_get('nodequeue_pager_name_'. $delta, 'Nodequeue Pager '. $delta),
	);
	$nodequeues = array();
	foreach (nodequeue_get_all_qids() as $sqid) {
		$nq = nodequeue_load($sqid);
		$nodequeues[$nq->qid] = $nq->title;
	}
	$form['nodequeue_pager_nodequeue_'. $delta] = array(
		'#type' => 'select',
		'#title' => t('Source Nodequeue'),
		'#description' => t('Select the nodequeue id to use for this pager.'),
		'#required' => TRUE,
		'#default_value' => variable_get('nodequeue_pager_nodequeue_'. $delta, '1'),
		'#options' => $nodequeues,
	);
	$form['nodequeue_pager_wrap_'. $delta] = array(
		'#type' => 'checkbox',
		'#title' => t('Wrap Previous and Next Links'),
		'#required' => FALSE,
		'#description' => t('Check this if you would like the previous and next links for first and last elements in the queue to wrap back to begininng or end of queue'),
		'#default_value' => variable_get('nodequeue_pager_wrap_'. $delta, 1),
	);
	$form['nodequeue_pager_links_'. $delta] = array(
		'#type' => 'select',
		'#title' => t('Links Available'),
		'#description' => t('Select the nodequeue id to use for this pager.'),
		'#required' => TRUE,
		'#default_value' => variable_get('nodequeue_pager_links_'. $delta, '2'),
		'#options' => array(t('Previous Only'), t('Next Only'), t('Previous and Next')),
	);
	$form['nodequeue_pager_title_'. $delta] = array(
		'#type' => 'checkbox',
		'#title' => t('Show Node Titles'),
		'#required' => FALSE,
		'#description' => t('Check this if you would like the previous and next links to include node titles'),
		'#default_value' => variable_get('nodequeue_pager_title_'. $delta, 0),
	);
	return $form;
}

function nodequeue_pager_block_save($delta = '', $edit = array()) {
	variable_set('nodequeue_pager_name_'. $delta, $edit['nodequeue_pager_name_'. $delta]);
	variable_set('nodequeue_pager_nodequeue_'. $delta, $edit['nodequeue_pager_nodequeue_'. $delta]);
	variable_set('nodequeue_pager_wrap_'. $delta, $edit['nodequeue_pager_wrap_'. $delta]);
	variable_set('nodequeue_pager_links_'. $delta, $edit['nodequeue_pager_links_'. $delta]);
	variable_set('nodequeue_pager_title_'. $delta, $edit['nodequeue_pager_title_'. $delta]);
	return;
}

/**
 * Implements hook_block_view().
 */
function nodequeue_pager_block_view($delta = '') {
	$block['content'] = _nodequeue_pager_block($delta);
	return $block;
}

/**
 * Settings form as implemented by hook_menu
 */
function nodequeue_pager_admin_settings() {
	$form['nodequeue_pagers_number'] = array(
		'#type' => 'textfield',
		'#description' => t('The total number of independent Nodequeue Pager blocks you want. Enter a number between 0 and 99. If you set this to 0, you will have no blocks created'),
		'#default_value' => variable_get('nodequeue_pagers_number', '2'),
		'#size' => 2,
	);
	$form['nodequeue_pagers_previous'] = array(
		'#type' => 'textfield',
		'#description' => t('The text of the previous link'),
		'#default_value' => variable_get('nodequeue_pagers_previous', 'Previous'),
		'#size' => 255,
	);
	$form['nodequeue_pagers_next'] = array(
		'#type' => 'textfield',
		'#description' => t('The text of the next link'),
		'#default_value' => variable_get('nodequeue_pagers_next', 'Next'),
		'#size' => 255,
	);
	$form['#validate'][] = 'nodequeue_pager_settings_validate';
	return system_settings_form($form);
}

/**
 * Implementation of hook_theme().
 */
function nodequeue_pager_theme() {
	return array(
		'nodequeue_pager' => array(
			'variables' => array('sqid' => NULL, 'nid' => NULL, 'wrap' => TRUE),
		),
	);
}

/**
 * Builds the final Nodequeue Pager.
 *
 * @param $sqid
 *   The id of the nodequeue to use
 * @param $nid
 *   The id of the node within the nodequeue.
 * @param $wrap
 *   Boolean true or false value as to whether prev and next
 *   links should wrap back to begining or end of nodequeue.
 * @return
 *   An HTML string of the pager
 */
function theme_nodequeue_pager($sqid = 1, $nid = NULL, $wrap = TRUE, $links = 2, $title = false) {

	$pager = new NodequeuePager($sqid, $wrap);

	$prev = FALSE;
	$next = FALSE;
	switch ($links) {
		case 0:
			$prev = $pager->getPrevious($nid);
			break;

		case 1:
			$next = $pager->getNext($nid);
			break;

		default:
			$prev = $pager->getPrevious($nid);
			$next = $pager->getNext($nid);
			break;
	}

	$items = array();

	if ($prev) {
		$text = variable_get('nodequeue_pagers_previous', t('Previous'));
		if($title) {
			$node = node_load($prev);
			$text .= ' <span class="title">' . $node->title . '<span>';
		}
		$items[] = l($text, 'node/'. $prev, array('html' => TRUE));
	}
	if ($next) {
		$text = variable_get('nodequeue_pagers_next', t('Next'));
		if($title) {
			$node = node_load($next);
			$text .= ' <span class="title">' . $node->title . '<span>';
		}
		$items[] = l($text, 'node/'. $next, array('html' => TRUE));
	}
	return theme('item_list', array('items' => $items));
}

/**
 * Custom validation for the settings form.
 */
function nodequeue_pager_settings_validate($form, &$form_state) {
	$number = $form_state['values']['nodequeue_pagers_number'];
	// Check to make sure it is a number and that is a maximum of 2 digits.
	if (!is_numeric($number) || drupal_strlen($number) > 2) {
		form_set_error('nodequeue_pagers_number', t('You must enter a number from 0 to 99.'));
	}
}

/**
 * Pager block content function calls themeable function with correct parameters.
 */
function _nodequeue_pager_block($delta) {
	require_once(dirname(__FILE__) .'/NodequeuePager.class.php');
	$sqid = variable_get('nodequeue_pager_nodequeue_'. $delta, '1');
	$nid = arg(1);
	if(nodequeue_get_subqueue_position($sqid, $nid)) {
		$wrap = (variable_get('nodequeue_pager_wrap_'. $delta, 1)==1)?true:false;
		$links = variable_get('nodequeue_pager_links_'. $delta, '1');
		$title = variable_get('nodequeue_pager_title_'. $delta, '1');
		return theme_nodequeue_pager($sqid, $nid, $wrap, $links, $title);
	}
	return FALSE;
}
